require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ValentinesDayDelieveriesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # ValentinesDayDelievery. As you add validations to ValentinesDayDelievery, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        red_flower_quantity: 2,
        white_flower_quantity: 0,
        pink_flower_quantity: 1,
        large_stuffed_animial_quantity: 0,
        medium_stuffed_animial_quantity: 1,
        small_animial_quantity: 2,
        buyer_name: 'Paul Darragh',
        buyer_phone_number: '15088388579',
        recievers_name: 'Lori Darragh',
        recievers_phone_number: '15088388580',
        delivery_location: 'UC 14-01',
        delivery_time: '9 pm',
        delivery_instructions: '',
        payment: 'cash',
        paypal_cost: '15.00',
        total_price: '15.00'
    }
  }

  let(:invalid_attributes) {
    {
        red_flower_quantity: nil,
        white_flower_quantity: nil,
        pink_flower_quantity: nil,
        large_stuffed_animial_quantity: nil,
        medium_stuffed_animial_quantity: nil,
        small_animial_quantity: nil,
        buyer_name: nil,
        buyer_phone_number: nil,
        recievers_name: nil,
        recievers_phone_number: nil,
        delivery_location: nil,
        delivery_time: nil,
        delivery_instructions: nil,
        payment: nil,
        paypal_cost: nil,
        total_price: nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ValentinesDayDelieveriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all valentines_day_delieveries as @valentines_day_delieveries" do
      valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:valentines_day_delieveries)).to eq([valentines_day_delievery])
    end
  end

  describe "GET show" do
    it "assigns the requested valentines_day_delievery as @valentines_day_delievery" do
      valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
      get :show, {:id => valentines_day_delievery.to_param}, valid_session
      expect(assigns(:valentines_day_delievery)).to eq(valentines_day_delievery)
    end
  end

  describe "GET new" do
    it "assigns a new valentines_day_delievery as @valentines_day_delievery" do
      get :new, {}, valid_session
      expect(assigns(:valentines_day_delievery)).to be_a_new(ValentinesDayDelievery)
    end
  end

  describe "GET edit" do
    it "assigns the requested valentines_day_delievery as @valentines_day_delievery" do
      valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
      get :edit, {:id => valentines_day_delievery.to_param}, valid_session
      expect(assigns(:valentines_day_delievery)).to eq(valentines_day_delievery)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new ValentinesDayDelievery" do
        expect {
          post :create, {:valentines_day_delievery => valid_attributes}, valid_session
        }.to change(ValentinesDayDelievery, :count).by(1)
      end

      it "assigns a newly created valentines_day_delievery as @valentines_day_delievery" do
        post :create, {:valentines_day_delievery => valid_attributes}, valid_session
        expect(assigns(:valentines_day_delievery)).to be_a(ValentinesDayDelievery)
        expect(assigns(:valentines_day_delievery)).to be_persisted
      end

      it "redirects to the created valentines_day_delievery" do
        post :create, {:valentines_day_delievery => valid_attributes}, valid_session
        expect(response).to redirect_to(ValentinesDayDelievery.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved valentines_day_delievery as @valentines_day_delievery" do
        post :create, {:valentines_day_delievery => invalid_attributes}, valid_session
        expect(assigns(:valentines_day_delievery)).to be_a_new(ValentinesDayDelievery)
      end

      it "re-renders the 'new' template" do
        post :create, {:valentines_day_delievery => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {
            red_flower_quantity: 2,
            white_flower_quantity: 1,
            pink_flower_quantity: 1,
            large_stuffed_animial_quantity: 0,
            medium_stuffed_animial_quantity: 1,
            small_animial_quantity: 2,
            buyer_name: 'Paul Darragh',
            buyer_phone_number: '15088388579',
            recievers_name: 'Lori Darragh',
            recievers_phone_number: '15088388580',
            delivery_location: 'UC 14-01',
            delivery_time: '9 pm',
            delivery_instructions: '',
            payment: 'cash',
            paypal_cost: '17.00',
            total_price: '17.00'
        }
      }

      it "updates the requested valentines_day_delievery" do
        valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
        put :update, {:id => valentines_day_delievery.to_param, :valentines_day_delievery => new_attributes}, valid_session
        valentines_day_delievery.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested valentines_day_delievery as @valentines_day_delievery" do
        valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
        put :update, {:id => valentines_day_delievery.to_param, :valentines_day_delievery => valid_attributes}, valid_session
        expect(assigns(:valentines_day_delievery)).to eq(valentines_day_delievery)
      end

      it "redirects to the valentines_day_delievery" do
        valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
        put :update, {:id => valentines_day_delievery.to_param, :valentines_day_delievery => valid_attributes}, valid_session
        expect(response).to redirect_to(valentines_day_delievery)
      end
    end

    describe "with invalid params" do
      it "assigns the valentines_day_delievery as @valentines_day_delievery" do
        valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
        put :update, {:id => valentines_day_delievery.to_param, :valentines_day_delievery => invalid_attributes}, valid_session
        expect(assigns(:valentines_day_delievery)).to eq(valentines_day_delievery)
      end

      it "re-renders the 'edit' template" do
        valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
        put :update, {:id => valentines_day_delievery.to_param, :valentines_day_delievery => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested valentines_day_delievery" do
      valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
      expect {
        delete :destroy, {:id => valentines_day_delievery.to_param}, valid_session
      }.to change(ValentinesDayDelievery, :count).by(-1)
    end

    it "redirects to the valentines_day_delieveries list" do
      valentines_day_delievery = ValentinesDayDelievery.create! valid_attributes
      delete :destroy, {:id => valentines_day_delievery.to_param}, valid_session
      expect(response).to redirect_to(valentines_day_delieveries_url)
    end
  end

end
